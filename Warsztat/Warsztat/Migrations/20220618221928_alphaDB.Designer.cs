// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warsztat.Models;

#nullable disable

namespace Warsztat.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220618221928_alphaDB")]
    partial class alphaDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.1.22076.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Warsztat.Models.Activity", b =>
                {
                    b.Property<int>("activityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("activityId"), 1L, 1);

                    b.Property<string>("activityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("dateTimeOfActivityEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateTimeOfActivityStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("personelId")
                        .HasColumnType("int");

                    b.Property<int>("requestId")
                        .HasColumnType("int");

                    b.Property<string>("result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("sequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.HasKey("activityId");

                    b.HasIndex("activityType");

                    b.HasIndex("personelId");

                    b.HasIndex("requestId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Warsztat.Models.ActivityDictionary", b =>
                {
                    b.Property<string>("activityType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("activityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("activityType");

                    b.ToTable("ActivityDictionaries");
                });

            modelBuilder.Entity("Warsztat.Models.Car", b =>
                {
                    b.Property<int>("carId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carId"), 1L, 1);

                    b.Property<string>("carTypeMark")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<string>("registrationNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("requestId")
                        .HasColumnType("int");

                    b.HasKey("carId");

                    b.HasIndex("carTypeMark");

                    b.HasIndex("clientId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Warsztat.Models.CarType", b =>
                {
                    b.Property<string>("model")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("mark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("model");

                    b.ToTable("CarTypes");
                });

            modelBuilder.Entity("Warsztat.Models.Client", b =>
                {
                    b.Property<int>("clientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clientId"), 1L, 1);

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("surrname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Warsztat.Models.Personel", b =>
                {
                    b.Property<int>("personelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("personelId"), 1L, 1);

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surrname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("personelId");

                    b.ToTable("Personels");
                });

            modelBuilder.Entity("Warsztat.Models.Request", b =>
                {
                    b.Property<int>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("requestId"), 1L, 1);

                    b.Property<int>("activityId")
                        .HasColumnType("int");

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("dateTimeOfRequestEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateTimeOfRequestStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("personelId")
                        .HasColumnType("int");

                    b.Property<string>("result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.HasKey("requestId");

                    b.HasIndex("carId");

                    b.HasIndex("personelId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Warsztat.Models.Activity", b =>
                {
                    b.HasOne("Warsztat.Models.ActivityDictionary", "activityDictionary")
                        .WithMany("Activities")
                        .HasForeignKey("activityType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warsztat.Models.Personel", "personel")
                        .WithMany("Activities")
                        .HasForeignKey("personelId");

                    b.HasOne("Warsztat.Models.Request", "request")
                        .WithMany("activities")
                        .HasForeignKey("requestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("activityDictionary");

                    b.Navigation("personel");

                    b.Navigation("request");
                });

            modelBuilder.Entity("Warsztat.Models.Car", b =>
                {
                    b.HasOne("Warsztat.Models.CarType", "carType")
                        .WithMany("Cars")
                        .HasForeignKey("carTypeMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warsztat.Models.Client", "client")
                        .WithMany("Cars")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("carType");

                    b.Navigation("client");
                });

            modelBuilder.Entity("Warsztat.Models.Request", b =>
                {
                    b.HasOne("Warsztat.Models.Car", "car")
                        .WithMany("requests")
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warsztat.Models.Personel", "personel")
                        .WithMany("requests")
                        .HasForeignKey("personelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("personel");
                });

            modelBuilder.Entity("Warsztat.Models.ActivityDictionary", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Warsztat.Models.Car", b =>
                {
                    b.Navigation("requests");
                });

            modelBuilder.Entity("Warsztat.Models.CarType", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Warsztat.Models.Client", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Warsztat.Models.Personel", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("requests");
                });

            modelBuilder.Entity("Warsztat.Models.Request", b =>
                {
                    b.Navigation("activities");
                });
#pragma warning restore 612, 618
        }
    }
}
